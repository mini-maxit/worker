// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mini-maxit/worker/internal/services (interfaces: FileService,ListenerService,MessageService,RunnerService,SolutionService,TestCaseService,WorkerService,WorkerPoolService)

// Generated by this command:
//
//	mockgen -destination tests/mocksgen.go  github.com/mini-maxit/worker/internal/services FileService,ListenerService,MessageService,RunnerService,SolutionService,TestCaseService,WorkerService,WorkerPoolService
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compiler "github.com/mini-maxit/worker/compiler"
	executor "github.com/mini-maxit/worker/executor"
	services "github.com/mini-maxit/worker/internal/services"
	solution "github.com/mini-maxit/worker/internal/solution"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// HandleTaskPackage mocks base method.
func (m *MockFileService) HandleTaskPackage(arg0, arg1, arg2 int64) (*services.TaskDirConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTaskPackage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*services.TaskDirConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTaskPackage indicates an expected call of HandleTaskPackage.
func (mr *MockFileServiceMockRecorder) HandleTaskPackage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTaskPackage", reflect.TypeOf((*MockFileService)(nil).HandleTaskPackage), arg0, arg1, arg2)
}

// StoreSolutionResult mocks base method.
func (m *MockFileService) StoreSolutionResult(arg0 solution.Result, arg1 string, arg2, arg3, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSolutionResult", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSolutionResult indicates an expected call of StoreSolutionResult.
func (mr *MockFileServiceMockRecorder) StoreSolutionResult(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSolutionResult", reflect.TypeOf((*MockFileService)(nil).StoreSolutionResult), arg0, arg1, arg2, arg3, arg4)
}

// UnconpressPackage mocks base method.
func (m *MockFileService) UnconpressPackage(arg0 string) (*services.TaskDirConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnconpressPackage", arg0)
	ret0, _ := ret[0].(*services.TaskDirConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnconpressPackage indicates an expected call of UnconpressPackage.
func (mr *MockFileServiceMockRecorder) UnconpressPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnconpressPackage", reflect.TypeOf((*MockFileService)(nil).UnconpressPackage), arg0)
}

// MockListenerService is a mock of ListenerService interface.
type MockListenerService struct {
	ctrl     *gomock.Controller
	recorder *MockListenerServiceMockRecorder
}

// MockListenerServiceMockRecorder is the mock recorder for MockListenerService.
type MockListenerServiceMockRecorder struct {
	mock *MockListenerService
}

// NewMockListenerService creates a new mock instance.
func NewMockListenerService(ctrl *gomock.Controller) *MockListenerService {
	mock := &MockListenerService{ctrl: ctrl}
	mock.recorder = &MockListenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerService) EXPECT() *MockListenerServiceMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockListenerService) Listen(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Listen", arg0)
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerServiceMockRecorder) Listen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListenerService)(nil).Listen), arg0)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// DeclareQueue mocks base method.
func (m *MockMessageService) DeclareQueue(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareQueue indicates an expected call of DeclareQueue.
func (mr *MockMessageServiceMockRecorder) DeclareQueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareQueue", reflect.TypeOf((*MockMessageService)(nil).DeclareQueue), arg0, arg1)
}

// PublishErrorToQueue mocks base method.
func (m *MockMessageService) PublishErrorToQueue(arg0, arg1, arg2 string, arg3 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishErrorToQueue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishErrorToQueue indicates an expected call of PublishErrorToQueue.
func (mr *MockMessageServiceMockRecorder) PublishErrorToQueue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishErrorToQueue", reflect.TypeOf((*MockMessageService)(nil).PublishErrorToQueue), arg0, arg1, arg2, arg3)
}

// PublishSuccessToQueue mocks base method.
func (m *MockMessageService) PublishSuccessToQueue(arg0, arg1, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSuccessToQueue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSuccessToQueue indicates an expected call of PublishSuccessToQueue.
func (mr *MockMessageServiceMockRecorder) PublishSuccessToQueue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSuccessToQueue", reflect.TypeOf((*MockMessageService)(nil).PublishSuccessToQueue), arg0, arg1, arg2, arg3)
}

// RequeueTaskWithPriority2 mocks base method.
func (m *MockMessageService) RequeueTaskWithPriority2(arg0 string, arg1 services.QueueMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequeueTaskWithPriority2", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequeueTaskWithPriority2 indicates an expected call of RequeueTaskWithPriority2.
func (mr *MockMessageServiceMockRecorder) RequeueTaskWithPriority2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequeueTaskWithPriority2", reflect.TypeOf((*MockMessageService)(nil).RequeueTaskWithPriority2), arg0, arg1)
}

// MockRunnerService is a mock of RunnerService interface.
type MockRunnerService struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerServiceMockRecorder
}

// MockRunnerServiceMockRecorder is the mock recorder for MockRunnerService.
type MockRunnerServiceMockRecorder struct {
	mock *MockRunnerService
}

// NewMockRunnerService creates a new mock instance.
func NewMockRunnerService(ctrl *gomock.Controller) *MockRunnerService {
	mock := &MockRunnerService{ctrl: ctrl}
	mock.recorder = &MockRunnerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerService) EXPECT() *MockRunnerServiceMockRecorder {
	return m.recorder
}

// RunSolution mocks base method.
func (m *MockRunnerService) RunSolution(arg0 *services.TaskForRunner, arg1 string) solution.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSolution", arg0, arg1)
	ret0, _ := ret[0].(solution.Result)
	return ret0
}

// RunSolution indicates an expected call of RunSolution.
func (mr *MockRunnerServiceMockRecorder) RunSolution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSolution", reflect.TypeOf((*MockRunnerService)(nil).RunSolution), arg0, arg1)
}

// MockSolutionService is a mock of SolutionService interface.
type MockSolutionService struct {
	ctrl     *gomock.Controller
	recorder *MockSolutionServiceMockRecorder
}

// MockSolutionServiceMockRecorder is the mock recorder for MockSolutionService.
type MockSolutionServiceMockRecorder struct {
	mock *MockSolutionService
}

// NewMockSolutionService creates a new mock instance.
func NewMockSolutionService(ctrl *gomock.Controller) *MockSolutionService {
	mock := &MockSolutionService{ctrl: ctrl}
	mock.recorder = &MockSolutionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolutionService) EXPECT() *MockSolutionServiceMockRecorder {
	return m.recorder
}

// PrepareSolutionFilePath mocks base method.
func (m *MockSolutionService) PrepareSolutionFilePath(arg0, arg1 string, arg2 compiler.Compiler, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareSolutionFilePath", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareSolutionFilePath indicates an expected call of PrepareSolutionFilePath.
func (mr *MockSolutionServiceMockRecorder) PrepareSolutionFilePath(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSolutionFilePath", reflect.TypeOf((*MockSolutionService)(nil).PrepareSolutionFilePath), arg0, arg1, arg2, arg3)
}

// ReadExecutionResultFile mocks base method.
func (m *MockSolutionService) ReadExecutionResultFile(arg0 string, arg1 int) ([]*executor.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExecutionResultFile", arg0, arg1)
	ret0, _ := ret[0].([]*executor.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExecutionResultFile indicates an expected call of ReadExecutionResultFile.
func (mr *MockSolutionServiceMockRecorder) ReadExecutionResultFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExecutionResultFile", reflect.TypeOf((*MockSolutionService)(nil).ReadExecutionResultFile), arg0, arg1)
}

// RemoveExecutionResultFile mocks base method.
func (m *MockSolutionService) RemoveExecutionResultFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExecutionResultFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExecutionResultFile indicates an expected call of RemoveExecutionResultFile.
func (mr *MockSolutionServiceMockRecorder) RemoveExecutionResultFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExecutionResultFile", reflect.TypeOf((*MockSolutionService)(nil).RemoveExecutionResultFile), arg0)
}

// SetupOutputErrorFiles mocks base method.
func (m *MockSolutionService) SetupOutputErrorFiles(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupOutputErrorFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupOutputErrorFiles indicates an expected call of SetupOutputErrorFiles.
func (mr *MockSolutionServiceMockRecorder) SetupOutputErrorFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupOutputErrorFiles", reflect.TypeOf((*MockSolutionService)(nil).SetupOutputErrorFiles), arg0, arg1, arg2)
}

// MockTestCaseService is a mock of TestCaseService interface.
type MockTestCaseService struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseServiceMockRecorder
}

// MockTestCaseServiceMockRecorder is the mock recorder for MockTestCaseService.
type MockTestCaseServiceMockRecorder struct {
	mock *MockTestCaseService
}

// NewMockTestCaseService creates a new mock instance.
func NewMockTestCaseService(ctrl *gomock.Controller) *MockTestCaseService {
	mock := &MockTestCaseService{ctrl: ctrl}
	mock.recorder = &MockTestCaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseService) EXPECT() *MockTestCaseServiceMockRecorder {
	return m.recorder
}

// EvaluateAllTestCases mocks base method.
func (m *MockTestCaseService) EvaluateAllTestCases(arg0 *services.TaskForRunner, arg1 string, arg2 []string) solution.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateAllTestCases", arg0, arg1, arg2)
	ret0, _ := ret[0].(solution.Result)
	return ret0
}

// EvaluateAllTestCases indicates an expected call of EvaluateAllTestCases.
func (mr *MockTestCaseServiceMockRecorder) EvaluateAllTestCases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateAllTestCases", reflect.TypeOf((*MockTestCaseService)(nil).EvaluateAllTestCases), arg0, arg1, arg2)
}

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// ProcessTask mocks base method.
func (m *MockWorkerService) ProcessTask(arg0, arg1 string, arg2 services.TaskQueueMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessTask", arg0, arg1, arg2)
}

// ProcessTask indicates an expected call of ProcessTask.
func (mr *MockWorkerServiceMockRecorder) ProcessTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTask", reflect.TypeOf((*MockWorkerService)(nil).ProcessTask), arg0, arg1, arg2)
}

// MockWorkerPoolService is a mock of WorkerPoolService interface.
type MockWorkerPoolService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolServiceMockRecorder
}

// MockWorkerPoolServiceMockRecorder is the mock recorder for MockWorkerPoolService.
type MockWorkerPoolServiceMockRecorder struct {
	mock *MockWorkerPoolService
}

// NewMockWorkerPoolService creates a new mock instance.
func NewMockWorkerPoolService(ctrl *gomock.Controller) *MockWorkerPoolService {
	mock := &MockWorkerPoolService{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPoolService) EXPECT() *MockWorkerPoolServiceMockRecorder {
	return m.recorder
}

// GetWorkersStatus mocks base method.
func (m *MockWorkerPoolService) GetWorkersStatus() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkersStatus")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetWorkersStatus indicates an expected call of GetWorkersStatus.
func (mr *MockWorkerPoolServiceMockRecorder) GetWorkersStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkersStatus", reflect.TypeOf((*MockWorkerPoolService)(nil).GetWorkersStatus))
}

// ProcessTask mocks base method.
func (m *MockWorkerPoolService) ProcessTask(arg0, arg1 string, arg2 services.TaskQueueMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTask indicates an expected call of ProcessTask.
func (mr *MockWorkerPoolServiceMockRecorder) ProcessTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTask", reflect.TypeOf((*MockWorkerPoolService)(nil).ProcessTask), arg0, arg1, arg2)
}
