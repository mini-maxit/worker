// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rabbitmq/responder/responder.go
//
// Generated by this command:
//
//	mockgen -source=internal/rabbitmq/responder/responder.go -destination=internal/pipeline/mocks/mock_responder.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	languages "github.com/mini-maxit/worker/pkg/languages"
	solution "github.com/mini-maxit/worker/pkg/solution"
	gomock "go.uber.org/mock/gomock"
)

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
	isgomock struct{}
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// PublishErrorToResponseQueue mocks base method.
func (m *MockResponder) PublishErrorToResponseQueue(messageType, messageID string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishErrorToResponseQueue", messageType, messageID, err)
}

// PublishErrorToResponseQueue indicates an expected call of PublishErrorToResponseQueue.
func (mr *MockResponderMockRecorder) PublishErrorToResponseQueue(messageType, messageID, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishErrorToResponseQueue", reflect.TypeOf((*MockResponder)(nil).PublishErrorToResponseQueue), messageType, messageID, err)
}

// PublishPayloadTaskRespond mocks base method.
func (m *MockResponder) PublishPayloadTaskRespond(messageType, messageID string, taskResult solution.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPayloadTaskRespond", messageType, messageID, taskResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPayloadTaskRespond indicates an expected call of PublishPayloadTaskRespond.
func (mr *MockResponderMockRecorder) PublishPayloadTaskRespond(messageType, messageID, taskResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPayloadTaskRespond", reflect.TypeOf((*MockResponder)(nil).PublishPayloadTaskRespond), messageType, messageID, taskResult)
}

// PublishSucessHandshakeRespond mocks base method.
func (m *MockResponder) PublishSucessHandshakeRespond(messageType, messageID string, languageSpecs []languages.LanguageSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSucessHandshakeRespond", messageType, messageID, languageSpecs)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSucessHandshakeRespond indicates an expected call of PublishSucessHandshakeRespond.
func (mr *MockResponderMockRecorder) PublishSucessHandshakeRespond(messageType, messageID, languageSpecs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSucessHandshakeRespond", reflect.TypeOf((*MockResponder)(nil).PublishSucessHandshakeRespond), messageType, messageID, languageSpecs)
}

// PublishSucessStatusRespond mocks base method.
func (m *MockResponder) PublishSucessStatusRespond(messageType, messageID string, statusMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSucessStatusRespond", messageType, messageID, statusMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSucessStatusRespond indicates an expected call of PublishSucessStatusRespond.
func (mr *MockResponderMockRecorder) PublishSucessStatusRespond(messageType, messageID, statusMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSucessStatusRespond", reflect.TypeOf((*MockResponder)(nil).PublishSucessStatusRespond), messageType, messageID, statusMap)
}
