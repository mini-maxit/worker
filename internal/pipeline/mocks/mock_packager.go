// Code generated by MockGen. DO NOT EDIT.
// Source: internal/stages/packager/packager.go
//
// Generated by this command:
//
//	mockgen -source=internal/stages/packager/packager.go -destination=internal/pipeline/mocks/mock_packager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	packager "github.com/mini-maxit/worker/internal/stages/packager"
	messages "github.com/mini-maxit/worker/pkg/messages"
	gomock "go.uber.org/mock/gomock"
)

// MockPackager is a mock of Packager interface.
type MockPackager struct {
	ctrl     *gomock.Controller
	recorder *MockPackagerMockRecorder
	isgomock struct{}
}

// MockPackagerMockRecorder is the mock recorder for MockPackager.
type MockPackagerMockRecorder struct {
	mock *MockPackager
}

// NewMockPackager creates a new mock instance.
func NewMockPackager(ctrl *gomock.Controller) *MockPackager {
	mock := &MockPackager{ctrl: ctrl}
	mock.recorder = &MockPackagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackager) EXPECT() *MockPackagerMockRecorder {
	return m.recorder
}

// PrepareSolutionPackage mocks base method.
func (m *MockPackager) PrepareSolutionPackage(taskQueueMessage *messages.TaskQueueMessage, msgID string) (*packager.TaskDirConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareSolutionPackage", taskQueueMessage, msgID)
	ret0, _ := ret[0].(*packager.TaskDirConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareSolutionPackage indicates an expected call of PrepareSolutionPackage.
func (mr *MockPackagerMockRecorder) PrepareSolutionPackage(taskQueueMessage, msgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSolutionPackage", reflect.TypeOf((*MockPackager)(nil).PrepareSolutionPackage), taskQueueMessage, msgID)
}

// SendSolutionPackage mocks base method.
func (m *MockPackager) SendSolutionPackage(dirConfig *packager.TaskDirConfig, testCases []messages.TestCase, hasCompilationErr bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSolutionPackage", dirConfig, testCases, hasCompilationErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSolutionPackage indicates an expected call of SendSolutionPackage.
func (mr *MockPackagerMockRecorder) SendSolutionPackage(dirConfig, testCases, hasCompilationErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSolutionPackage", reflect.TypeOf((*MockPackager)(nil).SendSolutionPackage), dirConfig, testCases, hasCompilationErr)
}
