// Code generated by MockGen. DO NOT EDIT.
// Source: internal/stages/verifier/verifier.go
//
// Generated by this command:
//
//	mockgen -source=internal/stages/verifier/verifier.go -destination=internal/pipeline/mocks/mock_verifier.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	packager "github.com/mini-maxit/worker/internal/stages/packager"
	messages "github.com/mini-maxit/worker/pkg/messages"
	solution "github.com/mini-maxit/worker/pkg/solution"
	gomock "go.uber.org/mock/gomock"
)

// MockVerifier is a mock of Verifier interface.
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
	isgomock struct{}
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier.
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance.
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// EvaluateAllTestCases mocks base method.
func (m *MockVerifier) EvaluateAllTestCases(dirConfig *packager.TaskDirConfig, testCases []messages.TestCase, messageID string) solution.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluateAllTestCases", dirConfig, testCases, messageID)
	ret0, _ := ret[0].(solution.Result)
	return ret0
}

// EvaluateAllTestCases indicates an expected call of EvaluateAllTestCases.
func (mr *MockVerifierMockRecorder) EvaluateAllTestCases(dirConfig, testCases, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateAllTestCases", reflect.TypeOf((*MockVerifier)(nil).EvaluateAllTestCases), dirConfig, testCases, messageID)
}
